* Space Age

Space Age is a Gemini server written in Clojure (https://clojure.org/).

It implements Gemini protocol specification v0.14.3 (November 29th
2020), which can be found here:

  gemini://gemini.circumlunar.space/docs/specification.gmi

** Installation Requirements

- [[https://jdk.java.net][Java Development Kit (version 11+)]]
- [[https://clojure.org/guides/getting_started][Clojure CLI tools]]

** Creating a TLS Certificate

The Gemini protocol is mandated to use TLS encryption for all
connections. Therefore, you will need to create a TLS certificate for
your server before you can launch it. Fortunately, the Gemini
specification recommends that clients use a "Trust On First Use"
(TOFU) policy of accepting certificates from servers without checking
them against a third-party Certificate Authority (CA).

Instead, the client should store the certificate locally and verify
that the same certificate is presented to the client each time it
revisits the same server. If the certificate changes before its
expiration date, the client should warn the user and let them decide
what action to take in response.

What this means for you as someone running a Gemini server is that you
can use a self-signed certificate to get going for free without
running into any likely issues with clients.

Use the "keytool" command (that comes with the JDK you installed
earlier) to generate a 2048 bit RSA key pair and self-signed
certificate (SHA256withRSA) with a validity of 365 days:

#+begin_src sh
$ keytool -genkey -keyalg RSA -keysize 2048 -alias selfsigned -validity 365 -keystore resources/keystore.jks -storepass moonshot
#+end_src

When run from this repository's toplevel directory, this command will
create a keystore.jks file in the resources directory with password
"moonshot". If you want the file to have a different name or password
or to be located somewhere else, just change the keytool arguments
accordingly.

*NOTE:* When prompted by the command, you should fill in the Common
        Name field with your site's domain name (e.g., foobar.org).

Finally, you will need to update the toplevel deps.edn file with the
correct name and password for your generated certificate file if you
don't use the defaults provided in the keytool command above. Just
update the values assigned to these two attributes under the :jvm-opts
settings in the :run-server alias:

- javax.net.ssl.keyStore
- javax.net.ssl.keyStorePassword

** Running the Server

To launch the Gemini server, simply navigate to the repository's
toplevel directory and run this command:

#+begin_src sh
$ clojure -M:run-server /my/document/root/directory
#+end_src

This will start the server on port 1965 and will use
/my/document/root/directory as its document root. You can then browse
to that directory by pointing your Gemini client at:

  gemini://localhost/

The server will have the same read permissions as whatever user runs
it, so ensure that the content in your document root is readable to
either that user, a group that it belongs to, or anyone on the local
machine.

As it runs, the Gemini server will log any requests that it receives
to standard out with timestamps. Feel free to redirect these to a log
file of your choosing. On a Unix system, this can be accomplished like
so:

#+begin_src sh
$ clojure -M:run-server /my/document/root/directory &> some_file.log
#+end_src

If you would like to run the server on a different port, you can
specify that as the second argument to the run-server alias like so:

#+begin_src sh
$ clojure -M:run-server /my/document/root/directory 31337
#+end_src

** Mapping Routes to the Filesystem

By default, any incoming requests will be mapped to file paths under
the document root directory specified at server start time. Regular
files (of both text and binary types) will be returned to the client
provided that they are readable to the server.

Examples:

|------------------------------------+------------------------------------------------|
| URL                                | Resolved File                                  |
|------------------------------------+------------------------------------------------|
| gemini://localhost/                | /my/document/root/directory/index.{gmi,gemini} |
| gemini://localhost/foo.gmi         | /my/document/root/directory/foo.gmi            |
| gemini://localhost/foo/bar/baz.png | /my/document/root/directory/foo/bar/baz.png    |
|------------------------------------+------------------------------------------------|

If a (readable) directory is requested, then one of two things will
happen:

1. An index.gmi or index.gemini file in that directory will be
   returned to the client.

2. If no index file is present, the server will automatically create a
   directory listing in text/gemini format and return that to the
   client. Each file or directory contained within the requested
   directory will be represented by a link for easy navigation through
   the filesystem.

If the requested route begins with /~someuser, the Gemini server will
map the remainder of the route to a public_gemini directory under
someuser's home directory. Keep in mind that this directory and its
contents must be readable to the server for this to work.

Examples:

|----------------------------------------------+-------------------------------------------------|
| URL                                          | Resolved File                                   |
|----------------------------------------------+-------------------------------------------------|
| gemini://localhost/~someuser/                | /home/someuser/public_gemini/index.{gmi,gemini} |
| gemini://localhost/~someuser/foo.gmi         | /home/someuser/public_gemini/foo.gmi            |
| gemini://localhost/~someuser/foo/bar/baz.png | /home/someuser/public_gemini/foo/bar/baz.png    |
|----------------------------------------------+-------------------------------------------------|

** Running CLJ Scripts

If a URL resolves to an executable CLJ file, it will be loaded and run
with the server's permissions in an auto-generated temporary
namespace. Therefore, you don't need to define one within your CLJ
file with the usual "ns" form. This also means that any "def*" forms
in your script (e.g., def, defn, defmacro) won't pollute the server's
pre-existing namespaces.

Your script files on disk should all end with the standard ".clj"
extension for Clojure files. However, you may omit the file extension
in your URL paths. Therefore these two URLs will both run the same
script file in Space Age:

- With .clj :: gemini://localhost/my-script.clj
- Without .clj :: gemini://localhost/my-script

*NOTE*: If the script path is followed by any additional path
        segments, they will be included in the ":params" vector on the
        request map passed to the script (see below).

Within the CLJ script, you will automatically have access to
everything in the clojure.core namespace and can use "require" and
"import" to load any additional Clojure namespaces or Java classes
within these languages' respective standard libaries. You may also
load namespaces from any other libraries included in the :deps map
within the server's toplevel deps.edn file.

*NOTE:* While supporting ad-hoc CLJ scripts in this way provides users
        with a great deal of flexibility in building out dynamic
        Gemini applications in Clojure, it is certainly not the most
        secure approach in the world. Keep in mind that all CLJ
        scripts run with the same permissions as the server process,
        so server administrators are encouraged to run Space Age as an
        unprivileged user whenever it is deployed within a multi-user
        context.

For your script to do anything useful, it must define a "main"
function, which receives a request map as its sole input and should
return a response map as its sole output.

The form of these maps is as follows:

*** Request
|-------------+-------------------------------------------------------------------------------|
| Key         | Example Value                                                                 |
|-------------+-------------------------------------------------------------------------------|
| uri         | "gemini://localhost/~someuser/buzz/foo/bar/baz?Up%2C%20up%2C%20and%20away%21" |
| scheme      | "gemini"                                                                      |
| host        | "localhost"                                                                   |
| port        | 1965                                                                          |
| raw-path    | "/~someuser/buzz/foo/bar/baz"                                                 |
| path        | "/~someuser/buzz/foo/bar/baz"                                                 |
| script-path | "/~someuser/buzz"                                                             |
| raw-query   | "Up%2C%20up%2C%20and%20away%21"                                               |
| query       | "Up, up, and away!"                                                           |
| params      | ["foo" "bar" "baz" "Up, up, and away!"]                                       |
| client-cert | a map (see below) or nil if no cert has been provided                         |
|-------------+-------------------------------------------------------------------------------|

*** Client Cert
|----------------------------+--------------------------------------------------------------------|
| Key                        | Example Value                                                      |
|----------------------------+--------------------------------------------------------------------|
| type                       | "X.509"                                                            |
| version                    | 3                                                                  |
| serial-number              | 687042568997699610239641669485459343721194177426                   |
| not-before                 | #inst "2020-06-24T21:51:53.000-00:00"                              |
| not-after                  | #inst "2120-05-31T21:51:53.000-00:00"                              |
| subject-common-name        | "lambdatronic"                                                     |
| subject-distinguished-name | "CN=lambdatronic"                                                  |
| subject-alternative-names  | nil                                                                |
| issuer-common-name         | "lambdatronic"                                                     |
| issuer-distinguished-name  | "CN=lambdatronic"                                                  |
| issuer-alternative-names   | nil                                                                |
| sha256-hash                | "baf48084af614b218e2a01de7b1021fa4c2b5ebe181e131608a6580e3949fbcb" |
|----------------------------+--------------------------------------------------------------------|

*** Response (Input)
|---------+---------------------|
| Key     | Example Value       |
|---------+---------------------|
| :status | 10                  |
| :meta   | "Enter coordinates" |
|---------+---------------------|

*** Response (Sensitive Input)
|---------+----------------------------|
| Key     | Example Value              |
|---------+----------------------------|
| :status | 11                         |
| :meta   | "Enter secret launch code" |
|---------+----------------------------|

*** Response (Success)
|---------+------------------------------------------------|
| Key     | Example Value                                  |
|---------+------------------------------------------------|
| :status | 20                                             |
| :meta   | "text/gemini; charset=utf-8"                   |
| :body   | "# Space TODOs\n\n* Explore\n* Hack\n* Profit! |
|---------+------------------------------------------------|

*** Response (Temporary Redirect)
|---------+---------------------------------------------------|
| Key     | Example Value                                     |
|---------+---------------------------------------------------|
| :status | 30                                                |
| :meta   | "gemini://localhost/~someuser/distant-galaxy.clj" |
|---------+---------------------------------------------------|

*** Response (Permanent Redirect)
|---------+-----------------------------------------------|
| Key     | Example Value                                 |
|---------+-----------------------------------------------|
| :status | 31                                            |
| :meta   | "gemini://localhost/~someuser/black-hole.clj" |
|---------+-----------------------------------------------|

*** Response (Temporary Failure)
|---------+--------------------------|
| Key     | Example Value            |
|---------+--------------------------|
| :status | 40                       |
| :meta   | "Danger, Will Robinson!" |
|---------+--------------------------|

*** Response (Server Unavailable)
|---------+------------------------|
| Key     | Example Value          |
|---------+------------------------|
| :status | 41                     |
| :meta   | "We're lost in space!" |
|---------+------------------------|

*** Response (CGI Error)
|---------+-----------------------|
| Key     | Example Value         |
|---------+-----------------------|
| :status | 42                    |
| :meta   | "Segmentation fault." |
|---------+-----------------------|

*** Response (Proxy Error)
|---------+---------------------------|
| Key     | Example Value             |
|---------+---------------------------|
| :status | 43                        |
| :meta   | "The wormhole is closed!" |
|---------+---------------------------|

*** Response (Slow Down)
|---------+---------------|
| Key     | Example Value |
|---------+---------------|
| :status |            44 |
| :meta   |             2 | <-- seconds to wait
|---------+---------------|

*** Response (Permanent Failure)
|---------+-------------------------------------|
| Key     | Example Value                       |
|---------+-------------------------------------|
| :status | 50                                  |
| :meta   | "Warning! System Failure Detected!" |
|---------+-------------------------------------|

*** Response (Not Found)
|---------+-----------------------------------|
| Key     | Example Value                     |
|---------+-----------------------------------|
| :status | 51                                |
| :meta   | "Schroedinger's cat may be dead." |
|---------+-----------------------------------|

*** Response (Gone)
|---------+------------------------------------------|
| Key     | Example Value                            |
|---------+------------------------------------------|
| :status | 52                                       |
| :meta   | "Schroedinger's cat is definitely dead." |
|---------+------------------------------------------|

*** Response (Proxy Request Refused)
|---------+-----------------------------------------------|
| Key     | Example Value                                 |
|---------+-----------------------------------------------|
| :status | 53                                            |
| :meta   | "The wormhole is emitting a repulsion field!" |
|---------+-----------------------------------------------|

*** Response (Bad Request)
|---------+-----------------------------------------|
| Key     | Example Value                           |
|---------+-----------------------------------------|
| :status | 59                                      |
| :meta   | "HAL9000 says: Input does not compute." |
|---------+-----------------------------------------|

*** Response (Client Certificate Required)
|---------+---------------------------------------|
| Key     | Example Value                         |
|---------+---------------------------------------|
| :status | 60                                    |
| :meta   | "Please present your Space Force ID." |
|---------+---------------------------------------|

*** Response (Client Certificate Not Authorised)
|---------+-----------------------------------------------|
| Key     | Example Value                                 |
|---------+-----------------------------------------------|
| :status | 61                                            |
| :meta   | "Unauthorised ID. You need higher clearance." |
|---------+-----------------------------------------------|

*** Response (Client Certificate Not Valid)
|---------+------------------------------------|
| Key     | Example Value                      |
|---------+------------------------------------|
| :status | 62                                 |
| :meta   | "Your Space Force ID has expired." |
|---------+------------------------------------|

*** Utility Functions for Generating Responses

Although you can simply create any of the response maps described
above using Clojure's map literals, Space Age comes fully loaded with
a collection of utility functions that produce each of these response
maps for you (see src/space_age/responses.clj). You can import these
functions into your CLJ scripts by adding this line to the top of your
script:

#+begin_src clojure
(require '[space-age.responses :refer :all])
#+end_src

** Handling MIME Types

Every time a file is sent to the client, the Gemini protocol requires
that it be accompanied by metadata specifying the mime-type of the
file's contents. Currently, Space Age will attempt to autodetect each
file's mime-type based on its file extension.

The list of all supported mime-types can be found in
resources/mime-types.conf. If you would like to serve files with
extensions that are not included in this file, you can simply add them
to it and restart the server for the changes to take effect.

*NOTE:* If the file extension cannot be detected (or the file has no
        extension), the Gemini server will fall back to use
        "application/octet-stream" as the default mime-type.

** Gemtext Markup

The Gemini specification details a lightweight markup language called
gemtext. This is what you would use in your *.gmi and *.gemini files
to build up the contents of your site (called a "capsule" within the
Gemini community). A quick introduction to gemtext markup can be found
at the following link:

  gemini://gemini.circumlunar.space/docs/gemtext.gmi

** Further Reading

For more information on the Gemini protocol, its specification, and
gemtext markup or to find a Gemini client (or a different server),
check out the Project Gemini capsule here:

  gemini://gemini.circumlunar.space/

If you haven't yet installed a Gemini client, get yourself
bootstrapped by visiting the Project Gemini capsule via web proxy:

  https://portal.mozz.us/gemini/gemini.circumlunar.space/

** License and Distribution

Copyright © 2020-2021 Gary W. Johnson <lambdatronic@disroot.org>

This software is distributed under the terms of the Eclipse Public
License version 2.0 (or at the recipient's discretion, any later
version). See LICENSE.txt in this repository for further details.
